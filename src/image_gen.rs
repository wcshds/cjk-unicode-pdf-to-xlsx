use image::{imageops::grayscale, ImageBuffer, Luma, Rgba, GenericImage};
use itertools::Itertools;
use resvg::{
    tiny_skia,
    usvg::{self, NodeExt, TreeParsing},
};

fn drawn_to_svg(drawn: &str) -> String {
    format!(
        r#"<svg xmlns="http://www.w3.org/2000/svg" fill="none" width="300" height="300">
    <rect width="100%" height="100%" fill="rgb(255, 255, 255)"></rect>
    <path id="hanzi" d="{}" fill="rgb(0, 0, 0)" transform="matrix(110,0,0,-110,90,190)"/>
</svg>"#,
        drawn
    )
}

fn calculate_left_top(tree: &usvg::Tree) -> (u32, u32) {
    let node = tree.node_by_id("hanzi").unwrap();
    let bbox = node.calculate_bbox().unwrap();
    let width = bbox.right() - bbox.left();
    let height = bbox.bottom() - bbox.top();

    let x_offset = (128.0 - width) / 2.0;
    let y_offset = (128.0 - height) / 2.0;

    (
        (bbox.left() - x_offset).floor() as u32,
        (bbox.top() - y_offset).floor() as u32,
    )
}

pub fn svg_drawn_to_image(drawn: &str) -> ImageBuffer<Luma<u8>, Vec<u8>> {
    let svg_data = drawn_to_svg(drawn);
    let opt = usvg::Options::default();
    let tree = usvg::Tree::from_data(svg_data.as_bytes(), &opt).unwrap();
    let rtree = resvg::Tree::from_usvg(&tree);
    // 設定畫布
    let pixmap_size = rtree.size.to_int_size();
    let mut pixmap = tiny_skia::Pixmap::new(pixmap_size.width(), pixmap_size.height()).unwrap();
    rtree.render(tiny_skia::Transform::default(), &mut pixmap.as_mut());

    let container_vec = pixmap
        .pixels()
        .iter()
        .map(|ele| [ele.red(), ele.green(), ele.blue(), ele.alpha()])
        .flatten()
        .collect_vec();

    let img: ImageBuffer<Rgba<u8>, Vec<u8>> =
        ImageBuffer::from_vec(pixmap_size.width(), pixmap_size.height(), container_vec).unwrap();
    let mut gray = grayscale(&img);

    let (x, y) = calculate_left_top(&tree);
    let clip_img = gray.sub_image(x, y, 128, 128);

    clip_img.to_image()
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn tt() {
        let drawn_data = r"M.041015626 .6640625H.15625C.1640625 .703125 .17122396 .7532552 .17773438 .8144531L.24804688 .7890625C.25 .7832031 .24934896 .7792969 .24609375 .77734377 .2421875 .77473959 .234375 .7714844 .22265625 .7675781 .2141927 .72786459 .20703125 .6933594 .20117188 .6640625H.29492188L.32617188 .69921877 .37304688 .6542969C.3736979 .6503906 .3736979 .6464844 .37304688 .6425781 .37109376 .63997396 .3671875 .6386719 .36132813 .6386719H.1953125C.18359375 .5885417 .16927083 .5423177 .15234375 .5H.27148438L.29882813 .5332031 .34375 .49804688C.34960938 .4934896 .3528646 .48893229 .35351563 .484375 .35351563 .48046876 .3450521 .47265626 .328125 .4609375V-.0146484379C.33007813-.03873698 .32617188-.05891927 .31640626-.07519531 .30664063-.09016927 .28841148-.10123698 .26171876-.10839844 .26171876-.09016927 .25585938-.07779948 .24414063-.07128906 .234375-.06542969 .21484375-.057617189 .18554688-.047851564L.18945313-.032226564C.21484375-.036132814 .23242188-.03938802 .2421875-.041992189 .25195313-.04264323 .26171876-.04264323 .27148438-.041992189 .27929688-.040039064 .2825521-.028320313 .28125-.0068359377V.16210938H.16015625V.017578125L.1640625-.06738281C.16471355-.07519531 .15885417-.08496094 .14648438-.09667969 .13476563-.10644531 .123046878-.11165365 .111328128-.11230469L.115234378 .009765625V.42578126C.096354167 .38736979 .067708339 .34700523 .029296875 .3046875L.01953125 .31445313C.048828126 .36523438 .075520839 .41927085 .099609378 .4765625 .12109375 .5332031 .13802083 .58723959 .15039063 .6386719H.109375C.095703128 .6386719 .078125 .6360677 .056640626 .6308594L.041015626 .6640625M.16015625 .1875H.28125V.3125H.16015625V.1875M.16015625 .33789063H.28125V.47460938H.16015625V.33789063M.9316406 .41015626C.9316406 .40234376 .92578127 .39453126 .9140625 .38671876 .9036458 .3815104 .8925781 .37825523 .8808594 .37695313V.40429688H.7578125V.32226563H.8691406L.8984375 .35546876 .9453125 .31445313C.95182296 .3059896 .9505208 .30078126 .94140627 .29882813H.7578125V.21484375H.859375L.8925781 .24804688 .9394531 .20898438C.9453125 .20117188 .94466146 .1953125 .9375 .19140625H.7578125V.09765625H.859375L.8886719 .13671875 .93359377 .091796878C.9375 .083984378 .9355469 .078125 .9277344 .07421875H.7578125V-.0146484379C.7578125-.030273438 .7610677-.041992189 .7675781-.049804689 .7734375-.056315107 .7890625-.05891927 .8144531-.057617189H.8691406C.8860677-.057617189 .89908859-.055664064 .9082031-.051757814 .9160156-.04720052 .921875-.034179689 .92578127-.0126953129 .9277344 .005533854 .9296875 .028645834 .9316406 .056640626H.94921877C.95182296 .0234375 .95442709 .0016276041 .95703127-.0087890629 .9609375-.019205729 .9707031-.027669272 .9863281-.034179689 .9798177-.055664064 .9707031-.07128906 .9589844-.08105469 .9472656-.09082031 .9270833-.09667969 .8984375-.09863281H.7910156C.765625-.09863281 .74609377-.09407552 .7324219-.08496094 .71940109-.0764974 .71223959-.05826823 .7109375-.030273438V.46875L.7636719 .4296875H.8808594V.5410156H.76953127L.7402344 .5097656 .6894531 .5527344 .71484377 .5722656V.8144531L.78125 .7890625C.7910156 .78255209 .7923177 .77734377 .78515627 .7734375L.76171877 .7636719V.6875H.8671875L.9003906 .73046877 .9589844 .6796875C.9628906 .6673177 .95703127 .6621094 .94140627 .6640625H.76171877V.56640627H.87109377L.89453127 .59765627 .94921877 .55859377C.9550781 .5514323 .95442709 .54622396 .9472656 .54296877L.9277344 .53125V.45117188L.9316406 .41015626M.40625 .40429688 .45117188 .37304688H.5625L.5917969 .40820313 .6425781 .37109376C.6484375 .36914063 .6516927 .36523438 .65234377 .359375 .6529948 .35481773 .6438802 .34635417 .625 .33398438V-.038085939C.625-.05891927 .6204427-.07584635 .6113281-.08886719 .6041667-.09928385 .5891927-.10904948 .56640627-.11816406 .5605469-.09602865 .5488281-.08105469 .53125-.07324219 .515625-.06542969 .49609376-.056966146 .47265626-.047851564L.4765625-.032226564C.5019531-.038085939 .5214844-.041992189 .53515627-.043945314 .54817709-.045247396 .55859377-.045898439 .56640627-.045898439 .5748698-.045247396 .57877609-.036783857 .578125-.020507813V.1015625H.45117188V-.0029296876L.45507813-.08105469C.45507813-.08821615 .44856773-.09667969 .43554688-.10644531 .42447917-.11425781 .41341148-.11816406 .40234376-.11816406L.40625-.0068359377V.40429688M.45117188 .125H.578125V.23046875H.45117188V.125M.45117188 .25390626H.578125V.34960938H.45117188V.25390626M.6171875 .48046876 .6464844 .515625 .6875 .47460938C.6894531 .47265626 .69140627 .4700521 .6933594 .46679688 .6933594 .45898438 .6894531 .45507813 .6816406 .45507813H.42578126C.4127604 .45507813 .3997396 .45247398 .38671876 .44726563L.37109376 .48046876H.5253906C.54296877 .5253906 .56184896 .5800781 .58203127 .64453127L.6425781 .6152344C.64908859 .61067709 .64973959 .6061198 .64453127 .6015625 .6360677 .5996094 .62890627 .5970052 .6230469 .59375 .6191406 .58984377 .6113281 .5800781 .5996094 .5644531 .5878906 .54817709 .57161459 .5201823 .55078127 .48046876H.6171875M.3671875 .6894531H.5996094L.6328125 .7265625 .6777344 .6816406C.6796875 .67903646 .68098959 .67578127 .6816406 .671875 .6822917 .6673177 .6770833 .66471359 .6660156 .6640625H.44140626C.42773438 .6640625 .40950523 .6614583 .38671876 .65625L.3671875 .6894531M.40039063 .62109377 .41015626 .6308594C.43554688 .6113281 .45638023 .59375 .47265626 .578125 .48632813 .5625 .49414063 .54817709 .49609376 .53515627 .49674479 .5214844 .4934896 .5110677 .48632813 .50390627 .48046876 .49609376 .47200523 .4934896 .4609375 .49609376 .45052085 .49804688 .4453125 .50716146 .4453125 .5234375 .44466148 .5371094 .44010417 .5527344 .43164063 .5703125 .42382813 .5859375 .41341148 .60286459 .40039063 .62109377M.45898438 .8066406 .46875 .81640627C.50390627 .7988281 .52734377 .7832031 .5390625 .76953127 .55078127 .75716146 .5566406 .7447917 .5566406 .7324219 .5572917 .72005209 .55403646 .7109375 .546875 .7050781 .5410156 .69921877 .5332031 .6972656 .5234375 .69921877 .5136719 .7011719 .5078125 .7083333 .5058594 .7207031 .5032552 .73046877 .5 .7421875 .49609376 .7558594 .4921875 .7688802 .47981773 .7858073 .45898438 .8066406Z";
        let img = svg_drawn_to_image(&drawn_data);
        img.save("test.png").unwrap();
    }
}
